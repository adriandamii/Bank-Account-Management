import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { List , Form, Button, Card} from 'semantic-ui-react';
import {useState, useEffect} from 'react';

export default function account({dataUser}) {
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [secondPage, setSecondPage] = useState(true);
    const [form, setForm] = useState({ money: dataUser.money });
    const [inputValue, setInputValue] = useState("");
    const [positiveNr, setPositiveNr] = useState(true);
    const [idInexist, setIdInexist] = useState(true);
    const [higherAmount, setHigherAmount] = useState(false);
    
    const router = useRouter();
    const query = router.query;
    const idClient = query.idClient;

    let queryId = "";
    let userName = "";
    let arrAccounts = [];
    let amount = 0;
    for (let i = 0; i < dataUser.length; ++i) {
        if (idClient == dataUser[i].idClient) {
            queryId = dataUser[i]._id;
            userName = dataUser[i].userName;
            arrAccounts.push(dataUser[i].account);
            amount = dataUser[i].money;
        }
    }

    useEffect(() => {
        if (userName === "") {
            setIdInexist(true);
        } else {
            setIdInexist(false);
        }
        if (isSubmitting) {
                updateData();   
        } else {
                setIsSubmitting(false);
        }
    }, [isSubmitting]);

    const updateData = async () => {
        try {
            const res = await fetch(`http://localhost:3000/api/${queryId}`, {
                method: 'PUT',
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(form)
            })
        } catch (error) {
            console.log(error);
        }
    }

    function alimentare(e) {
        if (inputValue < 0) {
            setPositiveNr(false);
        } else {
            setPositiveNr(true);
            setTimeout(window.location.reload(false), 500);
        }
        try {
            setForm({money: parseInt(amount) + parseInt(inputValue)});
            setIsSubmitting(true);  
        } catch (error) {
            console.log(error);
        }
        setInputValue("");
    }

    function retragere(e) {
        if (inputValue < 0) {
            setPositiveNr(false);
        } else {
            setPositiveNr(true);
            setTimeout(window.location.reload(false), 500);
        }

        if (amount < inputValue) {
            setHigherAmount(true);
        } else {
            try {
                setForm({money: parseInt(amount) - parseInt(inputValue)});
                setIsSubmitting(true);  
            } catch (error) {
                console.log(error);
            }
        }
        setInputValue("");
    }
    
    function handleChange(e) {
        setInputValue(e.target.value);
        setForm({money: e.target.value});
    }

    function toThirdPage() {
        setSecondPage(false);
    }
    
    function toSecondPage() {
        setSecondPage(true);
    }

    function numberWithCommas(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      }

    return (
        <>
            <Head>
                <title>Accounts</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {secondPage
                ?
                <>
                    <div>
                        <Link href="/">
                            <Button>Inapoi</Button>
                        </Link>
                    </div>
                    {idInexist 
                        ?
                        <p>Id client inexistent!</p>
                        :
                        <div>
                            <Card>
                                <Card.Content>
                                    <div>
                                        <Card.Header>
                                            <h3>Vizualizare conturi</h3>
                                            <label>
                                                {userName}
                                            </label>
                                        </Card.Header>
                                    </div>
                                    <div>
                                        <Card.Description>
                                            <label>
                                                <p>Conturi</p>
                                            </label>
                                        </Card.Description>
                                        {arrAccounts.map((account, index) => {
                                            return (
                                                <div key={index}>
                                                    <List celled>
                                                        <List.Item>
                                                            <List.Content >
                                                                <a onClick={toThirdPage}>{account}</a>
                                                            </List.Content>
                                                        </List.Item>
                                                    </List>
                                                </div>
                                            );
                                        })}
                                    </div>
                                </Card.Content>
                            </Card>
                        </div>
                    }
                </>
                :
                <>
                    <div>
                        <Button onClick={toSecondPage}>Inapoi</Button>  
                    </div>
                    <Card>
                        <Card.Content>
                            <h3>Operatiuni bancare</h3>
                            <div>
                                <label>
                                    <p>Sold</p>
                                    {numberWithCommas(amount)}
                                </label>
                            </div>
                            <Form>
                                <Form.Input 
                                    label='Introduceti o suma'
                                    name='money'
                                    value={form.money || ""}
                                    onChange={handleChange}
                                />
                                <div className='ui two buttons'>
                                    <Button onClick={retragere}>Retragere</Button>
                                    <Button onClick={alimentare}>Alimentare</Button>
                                </div>
                                {higherAmount ? <p>Sold insuficient </p> : null}
                                {positiveNr ? null : <p>Suma trebuie sa fie un numar intreg pozitiv!</p>}
                            </Form>
                        </Card.Content>
                    </Card>
                </>
            }
        </>
    )
}

account.getInitialProps = async () => {
    const res = await fetch('http://localhost:3000/api');
    const { data } = await res.json();
  
    return { dataUser: data }
  }